1. Basic Behavior of this:
Regular functions: this refers to the caller (global object or window in browsers).
 Arrow functions: this is lexically inherited from the surrounding scope (doesn’t change on invocation).
 Methods: this refers to the object the method belongs to.
 Constructor functions: this refers to the new instance created by new.

 2. this in Common Scenarios:
 setTimeout with regular functions: this points to the global object (window in browsers).
setTimeout with arrow functions: this inherits from the surrounding context.

3. this in Event Listeners:

 Regular function: this refers to the event target (DOM element).
 Arrow function: this refers to the surrounding context, not the event target.

 4. Explicitly Binding this:
 .call() and .apply() allow you to explicitly set the value of this.
 .call() takes individual arguments.
.apply() takes an array of arguments.

 .bind() creates a new function with this bound to a specific object.

 5. this in Constructor Functions and Classes:
In constructor functions, this refers to the newly created object when new is used.
In ES6 classes, this also refers to the newly created instance of the class.

6.Advanced this Use Cases:
 Arrow functions as callbacks: this in arrow functions inside callbacks is inherited from the surrounding scope.
(Not studied) Getter/Setter methods: this refers to the object when accessing properties via getters/setters.


7. 🚀 Unlike variables, this is determined when a function is called, not when it is defined.

How JavaScript Assigns this (Execution Context Rules)
Global Scope

this refers to window (browser) or global (Node.js).

Inside a Regular Function

this depends on how the function is called, not where it was defined.

Inside an Object Method

this refers to the object that called the method.

Inside an Arrow Function

this is lexically inherited (it does not create its own this).

Inside a Constructor Function (new keyword)

this refers to the new object being created.

My Exercises from ChatGPT
1. console.log(this);
this will refer to global in browser or window in node js

2.function regularFunction() {
  console.log(this);
}

const arrowFunction = () => {
  console.log(this);
};

regularFunction();  // ❓
arrowFunction();    // ❓

->both windows (because in regular function this is determined in runtime(or who calls it) and in runtime it points to window, in arrow function this is determined while it is defined, so it inherits this from surrounding which is windows)


3.const obj = {
  name: "Sanjeev",
  showName: function () {
    console.log(this.name);
  },
  arrowShowName: () => {
    console.log(this.name);
  }
};

obj.showName();      // ❓
obj.arrowShowName(); // ❓

-> Sanjeev, undefined

4.const obj = {
  name: "Sanjeev",
  greet: function () {
    function innerFunction() {
      console.log(this.name);
    }
    innerFunction();
  }
};

obj.greet(); // ❓

-> Undefined (In obj.greet(), when we call innerFunction(), it's a regular function call, not a method call on an object. So, inside innerFunction, this is not referring to obj but to the global object (window in browsers or global in Node.js).)

5.const obj = {
  name: "Sanjeev",
  greet: function () {
    const innerArrow = () => {
      console.log(this.name);
    };
    innerArrow();
  }
};

obj.greet(); // ❓

->Sanjeev(Arrow function inherits this from it's lexical scope, in this case greet method)


6.const person = {
  name: "Sanjeev",
  greet: function () {
    setTimeout(function () {
      console.log("Hello, " + this.name);
    }, 1000);
  }
};

person.greet(); // ❓

-> Hello undefined(Since setTimeOut is a global function and 'this' points to windows  )

7.const person = {
  name: "Sanjeev",
  greet: function () {
    setTimeout(() => {
      console.log("Hello, " + this.name);
    }, 1000);
  }
};

person.greet(); // ❓

->Sanjeev (because the callback function inside the settimeout is an arrow function, so incase of arrow function this is determined where it is defined, since it is defined inside greet method, it inherits 'this' from greet, and the greet points to person)


8.function Person(name) {
  this.name = name;
  this.greet = function () {
    console.log(this.name);
  };
}

const person1 = new Person("Sanjeev");
person1.greet(); // ❓

-> Sanjeev(Since this is binded in person1 object) 

9.function Person(name) {
  this.name = name;
  this.greet = () => {
    console.log(this.name);
  };
}

const person1 = new Person("Sanjeev");
person1.greet(); // ❓

->Undefined(because in arrow function 'this' is inherited from it's lexical scope/surrounding context.. And it doesn't bind to Person1, so this points to window)


10.const obj = {
  name: "Sanjeev",
  greet: function () {
    document.getElementById("myButton").addEventListener("click", function () {
      console.log(this.name);
    });
  }
};

obj.greet(); // What happens when you click the button?

->Undefined(Correct answer, Unlike arrow function regular function doesn't inherit this from greet, so in this case this points to window)
->Sanjeev(My answer but wrong answer)

11.const obj = {
  name: "Sanjeev",
  greet: function () {
    document.getElementById("myButton").addEventListener("click", () => {
      console.log(this.name);
    });
  }
};

obj.greet(); // What happens when you click the button?

->Sanjeev(Since arrow function inherits this from greet, which points to obj)

12(A)const person = {
  name: "Sanjeev",
  greet: function () {
    console.log(`Hello, my name is ${this.name}`);
  },
};

person.greet() // 'Hello, my name is Sanjeev Rai'
const greetFunc = person.greet;
greetFunc(); // "Hello, my name is undefined" because this is lost when we assign the method to a variable.

const greetFunc = person.greet.bind(person); // Creates a new function
greetFunc(); // "Hello, my name is Sanjeev"


12(B).const obj = {
  name: "Sanjeev",
  greet: function () {
    setTimeout(function () {
      console.log(this.name);
    }.bind(this), 1000);
  }
};

obj.greet(); // ❓
->Sanjeev(Normally 'this' should be pointed to windows, but since it is bind(this) i.e. bind(obj))

13.const obj = {
  name: "Sanjeev",
  greet: function () {
    const innerArrow = () => {
      const innerArrow2 = () => {
        console.log(this.name);
      };
      innerArrow2();
    };
    innerArrow();
  }
};

obj.greet(); // ❓
->Sanjeev, because the arrow function inherits this from nearest lexical scope, in this case greet method whose this points to obj. 

14.const obj = {
  name: "Sanjeev",
  greet: function () {
    function innerFunction() {
      console.log(this.name);
    }
    innerFunction.call(this);
  }
};

obj.greet(); // ❓
->Sanjeev... Since innerFunction is a normal function it's 'this' points to window, but since innerFunction is explicitly binded by 'this' i.e innerFunction().call(this) === innerFunction().call(obj). If the call(this) was not used, it would have shown undefined

15.const obj = {
  name: "Sanjeev",
  greet: function () {
    setTimeout(function () {
      console.log(this.name);
    }.call(this), 1000);
  }
};

obj.greet(); // ❓
->Sanjeev..If the call(this) was not used, this would refer to windows at this.name would be undefined.. But since call(this) is used, it will show Sanjeev


16.const obj = {
  name: "Sanjeev",
  greet: function () {
    setTimeout(() => {
      console.log(this.name);
    }, 1000);
  }
};

obj.greet(); // ❓
->Sanjeev.. since  the callback fn inside setTimeout is an arrow function, this is inherited from lexical scope i.e. greet, since it's a method of obj, this points to obj.. 

17.function Person(name) {
  this.name = name;
  this.greet = function() {
    console.log(this.name);
  };
}

const person1 = new Person("Sanjeev");
person1.greet(); // ❓
->Sanjeev... because when creating a new object person1, 'this' is binded in person1

18.const obj = {
  name: "Sanjeev"
};

function greet(city, country) {
  console.log(`Hello, ${this.name} from ${city}, ${country}`);
}

greet.apply(obj, ["Kathmandu", "Nepal"]); // ❓
--> Hello, Sanjeev from Kathmandu Nepal.. (If the apply was not used, the console would've shown Hello undefined from undefined, undefined)
The greet.apply(obj) binds 'this' of greet function to obj

19.const obj = {
  name: "Sanjeev",
  greet: function() {
    console.log(this.name);
  }
};

const greetBound = obj.greet.bind(obj);
greetBound(); // ❓
--> Sanjeev(Since 'this' is lost when we assign the method to a variable. so bind is required)